function [gradU3dX3d,gradU3dY3d,gradU3dZ3d,gradV3dX3d,gradV3dY3d,gradV3dZ3d,gradW3dX3d,gradW3dY3d,gradW3dZ3d] = asmGetVelGradient(asmCase,subCaseIdx,u2dOrgMsh,v2dOrgMsh,itpMesh)
% attention!
% the imput u2dOrgMsh v2dOrgMsh is the temperature field on the org mesh!
% the org mesh belongs to a sub case which is inidacted by subCaseIdx!

    % u2d v2d on itpMesh
    u2d = interp2(asmCase.x2dU{subCaseIdx}, ...
        asmCase.y2dU{subCaseIdx},...
        u2dOrgMsh,...
        itpMesh.x2d,...
        itpMesh.y2d,'spline');
    v2d = interp2(asmCase.x2dV{subCaseIdx}, ...
        asmCase.y2dV{subCaseIdx},...
        v2dOrgMsh,...
        itpMesh.x2d,...
        itpMesh.y2d,'spline');
    
    % use spherical coordiante to computer u3dGrad
    [u3d, v3d, w3d] = velocity2DTo3D(u2d, v2d, itpMesh.x2d, itpMesh.y2d);
    
    [gradU3dPhi,gradU3dTheta] = ...
        getGradCoordSph(itpMesh.dPhi, itpMesh.dTheta, u3d);
    [gradV3dPhi,gradV3dTheta] = ...
        getGradCoordSph(itpMesh.dPhi, itpMesh.dTheta, v3d);
    [gradW3dPhi,gradW3dTheta] = ...
        getGradCoordSph(itpMesh.dPhi, itpMesh.dTheta, w3d);
    
    [gradU3dX3d, gradU3dY3d, gradU3dZ3d] = ...
        gradSphToGrad3d(itpMesh.phi, itpMesh.theta, gradU3dPhi, gradU3dTheta);
    [gradV3dX3d, gradV3dY3d, gradV3dZ3d] = ...
        gradSphToGrad3d(itpMesh.phi, itpMesh.theta, gradV3dPhi, gradV3dTheta);
    [gradW3dX3d, gradW3dY3d, gradW3dZ3d] = ...
        gradSphToGrad3d(itpMesh.phi, itpMesh.theta, gradW3dPhi, gradW3dTheta);
    
    % shift to same mesh
    u2dOrgMshShift = interp2( ...
                asmCase.x2dU{subCaseIdx},...
                asmCase.y2dU{subCaseIdx},...
                u2dOrgMsh,...
                asmCase.x2dS{subCaseIdx},...
                asmCase.y2dS{subCaseIdx}...
        );
    v2dOrgMshShift = interp2( ...
                asmCase.x2dV{subCaseIdx},...
                asmCase.y2dV{subCaseIdx},...
                v2dOrgMsh,...
                asmCase.x2dS{subCaseIdx},...
                asmCase.y2dS{subCaseIdx}...
        );
    % transform to u3d on org mesh
    [x2dOrg,y2dOrg] = ...
        meshgrid( ...
            asmCase.x2dS{subCaseIdx},...
            asmCase.y2dS{subCaseIdx}...
        );
    [u3dOrg,v3dOrg,w3dOrg] = velocity2DTo3D(...
            u2dOrgMshShift,v2dOrgMshShift,...
            x2dOrg,y2dOrg...
        );
    % calculate 2dGradient on org mesh
    [gradU3dX2d, gradU3dY2d] = ...
        getGradCoord2d( ...
            asmCase.h1(subCaseIdx),...
            asmCase.h2(subCaseIdx),...
            u3dOrg ...
        );
    [gradV3dX2d, gradV3dY2d] = ...
        getGradCoord2d( ...
            asmCase.h1(subCaseIdx),...
            asmCase.h2(subCaseIdx),...
            v3dOrg ...
        );
    [gradW3dX2d, gradW3dY2d] = ...
        getGradCoord2d( ...
            asmCase.h1(subCaseIdx),...
            asmCase.h2(subCaseIdx),...
            w3dOrg ...
        );
    % transform to 3dGrad on org mesh
    [gradU3dX3dInnerOrg,gradU3dY3dInnerOrg,gradU3dZ3dInnerOrg] = ...
        grad2dToGrad3d(x2dOrg,y2dOrg,gradU3dX2d,gradU3dY2d);
    [gradV3dX3dInnerOrg,gradV3dY3dInnerOrg,gradV3dZ3dInnerOrg] = ...
        grad2dToGrad3d(x2dOrg,y2dOrg,gradV3dX2d,gradV3dY2d);
    [gradW3dX3dInnerOrg,gradW3dY3dInnerOrg,gradW3dZ3dInnerOrg] = ...
        grad2dToGrad3d(x2dOrg,y2dOrg,gradW3dX2d,gradW3dY2d);
    % interpolate to 3dGrad onto itp mesh
    gradU3dX3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradU3dX3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradU3dY3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradU3dY3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradU3dZ3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradU3dZ3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradV3dX3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradV3dX3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradV3dY3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradV3dY3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradV3dZ3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradV3dZ3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradW3dX3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradW3dX3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradW3dY3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradW3dY3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    gradW3dZ3dInner = interp2(...
            asmCase.x2dS{subCaseIdx}, ...
            asmCase.y2dS{subCaseIdx},...
            gradW3dZ3dInnerOrg,...
            itpMesh.x2d,...
            itpMesh.y2d,...
            'spline'...
        );
    
    % the top of spherical coordiante cuaclated u3dGrad is irregular
    % use 2d coordiante calculated instead
    overlapIdx = round(itpMesh.nTheta/10);
    gradU3dX3d(1:overlapIdx,:) = gradU3dX3dInner(1:overlapIdx,:);
    gradU3dY3d(1:overlapIdx,:) = gradU3dY3dInner(1:overlapIdx,:);
    gradU3dZ3d(1:overlapIdx,:) = gradU3dZ3dInner(1:overlapIdx,:);
    gradV3dX3d(1:overlapIdx,:) = gradV3dX3dInner(1:overlapIdx,:);
    gradV3dY3d(1:overlapIdx,:) = gradV3dY3dInner(1:overlapIdx,:);
    gradV3dZ3d(1:overlapIdx,:) = gradV3dZ3dInner(1:overlapIdx,:);
    gradW3dX3d(1:overlapIdx,:) = gradW3dX3dInner(1:overlapIdx,:);
    gradW3dY3d(1:overlapIdx,:) = gradW3dY3dInner(1:overlapIdx,:);
    gradW3dZ3d(1:overlapIdx,:) = gradW3dZ3dInner(1:overlapIdx,:);
end

